// Code generated by easyjson for marshaling/unmarshaling. DO NOT EDIT.

package securechat

import (
	json "encoding/json"

	easyjson "github.com/mailru/easyjson"
	jlexer "github.com/mailru/easyjson/jlexer"
	jwriter "github.com/mailru/easyjson/jwriter"
	virgil_v5 "gopkg.in/virgil.v5"
)

// suppress unused package warning
var (
	_ *json.RawMessage
	_ *jlexer.Lexer
	_ *jwriter.Writer
	_ easyjson.Marshaler
)

func easyjsonD2b7633eDecodeGopkgInVirgilV5Securechat(in *jlexer.Lexer, out *Message) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "initiator_ic_id":
			out.ID = string(in.String())
		case "session_id":
			if in.IsNull() {
				in.Skip()
				out.SessionId = nil
			} else {
				out.SessionId = in.Bytes()
			}
		case "eph":
			if in.IsNull() {
				in.Skip()
				out.Eph = nil
			} else {
				out.Eph = in.Bytes()
			}
		case "sign":
			if in.IsNull() {
				in.Skip()
				out.Signature = nil
			} else {
				out.Signature = in.Bytes()
			}
		case "responder_ic_id":
			out.ICID = string(in.String())
		case "responder_ltc_id":
			out.LTCID = string(in.String())
		case "responder_otc_id":
			out.OTCID = string(in.String())
		case "salt":
			if in.IsNull() {
				in.Skip()
				out.Salt = nil
			} else {
				out.Salt = in.Bytes()
			}
		case "ciphertext":
			if in.IsNull() {
				in.Skip()
				out.Ciphertext = nil
			} else {
				out.Ciphertext = in.Bytes()
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonD2b7633eEncodeGopkgInVirgilV5Securechat(out *jwriter.Writer, in Message) {
	out.RawByte('{')
	first := true
	_ = first
	if in.ID != "" {
		if !first {
			out.RawByte(',')
		}
		first = false
		out.RawString("\"initiator_ic_id\":")
		out.String(string(in.ID))
	}
	if len(in.SessionId) != 0 {
		if !first {
			out.RawByte(',')
		}
		first = false
		out.RawString("\"session_id\":")
		out.Base64Bytes(in.SessionId)
	}
	if len(in.Eph) != 0 {
		if !first {
			out.RawByte(',')
		}
		first = false
		out.RawString("\"eph\":")
		out.Base64Bytes(in.Eph)
	}
	if len(in.Signature) != 0 {
		if !first {
			out.RawByte(',')
		}
		first = false
		out.RawString("\"sign\":")
		out.Base64Bytes(in.Signature)
	}
	if !first {
		out.RawByte(',')
	}
	first = false
	out.RawString("\"responder_ic_id\":")
	out.String(string(in.ICID))
	if in.LTCID != "" {
		if !first {
			out.RawByte(',')
		}
		first = false
		out.RawString("\"responder_ltc_id\":")
		out.String(string(in.LTCID))
	}
	if in.OTCID != "" {
		if !first {
			out.RawByte(',')
		}
		first = false
		out.RawString("\"responder_otc_id\":")
		out.String(string(in.OTCID))
	}
	if !first {
		out.RawByte(',')
	}
	first = false
	out.RawString("\"salt\":")
	out.Base64Bytes(in.Salt)
	if !first {
		out.RawByte(',')
	}
	first = false
	out.RawString("\"ciphertext\":")
	out.Base64Bytes(in.Ciphertext)
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v Message) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonD2b7633eEncodeGopkgInVirgilV5Securechat(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v Message) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonD2b7633eEncodeGopkgInVirgilV5Securechat(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *Message) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonD2b7633eDecodeGopkgInVirgilV5Securechat(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *Message) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonD2b7633eDecodeGopkgInVirgilV5Securechat(l, v)
}
func easyjsonD2b7633eDecodeGopkgInVirgilV5Securechat1(in *jlexer.Lexer, out *CredentialsResponse) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "identity_card":
			if in.IsNull() {
				in.Skip()
				out.IdentityCard = nil
			} else {
				if out.IdentityCard == nil {
					out.IdentityCard = new(virgil_v5.CardResponse)
				}
				if data := in.Raw(); in.Ok() {
					in.AddError((*out.IdentityCard).UnmarshalJSON(data))
				}
			}
		case "long_time_card":
			if in.IsNull() {
				in.Skip()
				out.LTC = nil
			} else {
				if out.LTC == nil {
					out.LTC = new(virgil_v5.CardResponse)
				}
				if data := in.Raw(); in.Ok() {
					in.AddError((*out.LTC).UnmarshalJSON(data))
				}
			}
		case "one_time_card":
			if in.IsNull() {
				in.Skip()
				out.OTC = nil
			} else {
				if out.OTC == nil {
					out.OTC = new(virgil_v5.CardResponse)
				}
				if data := in.Raw(); in.Ok() {
					in.AddError((*out.OTC).UnmarshalJSON(data))
				}
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonD2b7633eEncodeGopkgInVirgilV5Securechat1(out *jwriter.Writer, in CredentialsResponse) {
	out.RawByte('{')
	first := true
	_ = first
	if !first {
		out.RawByte(',')
	}
	first = false
	out.RawString("\"identity_card\":")
	if in.IdentityCard == nil {
		out.RawString("null")
	} else {
		out.Raw((*in.IdentityCard).MarshalJSON())
	}
	if !first {
		out.RawByte(',')
	}
	first = false
	out.RawString("\"long_time_card\":")
	if in.LTC == nil {
		out.RawString("null")
	} else {
		out.Raw((*in.LTC).MarshalJSON())
	}
	if !first {
		out.RawByte(',')
	}
	first = false
	out.RawString("\"one_time_card\":")
	if in.OTC == nil {
		out.RawString("null")
	} else {
		out.Raw((*in.OTC).MarshalJSON())
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v CredentialsResponse) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonD2b7633eEncodeGopkgInVirgilV5Securechat1(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v CredentialsResponse) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonD2b7633eEncodeGopkgInVirgilV5Securechat1(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *CredentialsResponse) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonD2b7633eDecodeGopkgInVirgilV5Securechat1(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *CredentialsResponse) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonD2b7633eDecodeGopkgInVirgilV5Securechat1(l, v)
}
func easyjsonD2b7633eDecodeGopkgInVirgilV5Securechat2(in *jlexer.Lexer, out *CredentialsRequest) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "identity_cards_ids":
			if in.IsNull() {
				in.Skip()
				out.CardIds = nil
			} else {
				in.Delim('[')
				if out.CardIds == nil {
					if !in.IsDelim(']') {
						out.CardIds = make([]string, 0, 4)
					} else {
						out.CardIds = []string{}
					}
				} else {
					out.CardIds = (out.CardIds)[:0]
				}
				for !in.IsDelim(']') {
					var v16 string
					v16 = string(in.String())
					out.CardIds = append(out.CardIds, v16)
					in.WantComma()
				}
				in.Delim(']')
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonD2b7633eEncodeGopkgInVirgilV5Securechat2(out *jwriter.Writer, in CredentialsRequest) {
	out.RawByte('{')
	first := true
	_ = first
	if !first {
		out.RawByte(',')
	}
	first = false
	out.RawString("\"identity_cards_ids\":")
	if in.CardIds == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
		out.RawString("null")
	} else {
		out.RawByte('[')
		for v17, v18 := range in.CardIds {
			if v17 > 0 {
				out.RawByte(',')
			}
			out.String(string(v18))
		}
		out.RawByte(']')
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v CredentialsRequest) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonD2b7633eEncodeGopkgInVirgilV5Securechat2(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v CredentialsRequest) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonD2b7633eEncodeGopkgInVirgilV5Securechat2(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *CredentialsRequest) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonD2b7633eDecodeGopkgInVirgilV5Securechat2(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *CredentialsRequest) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonD2b7633eDecodeGopkgInVirgilV5Securechat2(l, v)
}
func easyjsonD2b7633eDecodeGopkgInVirgilV5Securechat3(in *jlexer.Lexer, out *CreateRecipientResponse) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "long_time_card":
			if in.IsNull() {
				in.Skip()
				out.LTC = nil
			} else {
				if out.LTC == nil {
					out.LTC = new(virgil_v5.CardResponse)
				}
				if data := in.Raw(); in.Ok() {
					in.AddError((*out.LTC).UnmarshalJSON(data))
				}
			}
		case "one_time_cards":
			if in.IsNull() {
				in.Skip()
				out.OTCS = nil
			} else {
				in.Delim('[')
				if out.OTCS == nil {
					if !in.IsDelim(']') {
						out.OTCS = make([]*virgil_v5.CardResponse, 0, 8)
					} else {
						out.OTCS = []*virgil_v5.CardResponse{}
					}
				} else {
					out.OTCS = (out.OTCS)[:0]
				}
				for !in.IsDelim(']') {
					var v19 *virgil_v5.CardResponse
					if in.IsNull() {
						in.Skip()
						v19 = nil
					} else {
						if v19 == nil {
							v19 = new(virgil_v5.CardResponse)
						}
						if data := in.Raw(); in.Ok() {
							in.AddError((*v19).UnmarshalJSON(data))
						}
					}
					out.OTCS = append(out.OTCS, v19)
					in.WantComma()
				}
				in.Delim(']')
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonD2b7633eEncodeGopkgInVirgilV5Securechat3(out *jwriter.Writer, in CreateRecipientResponse) {
	out.RawByte('{')
	first := true
	_ = first
	if !first {
		out.RawByte(',')
	}
	first = false
	out.RawString("\"long_time_card\":")
	if in.LTC == nil {
		out.RawString("null")
	} else {
		out.Raw((*in.LTC).MarshalJSON())
	}
	if !first {
		out.RawByte(',')
	}
	first = false
	out.RawString("\"one_time_cards\":")
	if in.OTCS == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
		out.RawString("null")
	} else {
		out.RawByte('[')
		for v20, v21 := range in.OTCS {
			if v20 > 0 {
				out.RawByte(',')
			}
			if v21 == nil {
				out.RawString("null")
			} else {
				out.Raw((*v21).MarshalJSON())
			}
		}
		out.RawByte(']')
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v CreateRecipientResponse) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonD2b7633eEncodeGopkgInVirgilV5Securechat3(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v CreateRecipientResponse) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonD2b7633eEncodeGopkgInVirgilV5Securechat3(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *CreateRecipientResponse) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonD2b7633eDecodeGopkgInVirgilV5Securechat3(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *CreateRecipientResponse) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonD2b7633eDecodeGopkgInVirgilV5Securechat3(l, v)
}
func easyjsonD2b7633eDecodeGopkgInVirgilV5Securechat4(in *jlexer.Lexer, out *CreateRecipientRequest) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "long_time_card":
			if in.IsNull() {
				in.Skip()
				out.LTC = nil
			} else {
				if out.LTC == nil {
					out.LTC = new(virgil_v5.SignableRequest)
				}
				if data := in.Raw(); in.Ok() {
					in.AddError((*out.LTC).UnmarshalJSON(data))
				}
			}
		case "one_time_cards":
			if in.IsNull() {
				in.Skip()
				out.OTCS = nil
			} else {
				in.Delim('[')
				if out.OTCS == nil {
					if !in.IsDelim(']') {
						out.OTCS = make([]*virgil_v5.SignableRequest, 0, 8)
					} else {
						out.OTCS = []*virgil_v5.SignableRequest{}
					}
				} else {
					out.OTCS = (out.OTCS)[:0]
				}
				for !in.IsDelim(']') {
					var v22 *virgil_v5.SignableRequest
					if in.IsNull() {
						in.Skip()
						v22 = nil
					} else {
						if v22 == nil {
							v22 = new(virgil_v5.SignableRequest)
						}
						if data := in.Raw(); in.Ok() {
							in.AddError((*v22).UnmarshalJSON(data))
						}
					}
					out.OTCS = append(out.OTCS, v22)
					in.WantComma()
				}
				in.Delim(']')
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonD2b7633eEncodeGopkgInVirgilV5Securechat4(out *jwriter.Writer, in CreateRecipientRequest) {
	out.RawByte('{')
	first := true
	_ = first
	if !first {
		out.RawByte(',')
	}
	first = false
	out.RawString("\"long_time_card\":")
	if in.LTC == nil {
		out.RawString("null")
	} else {
		out.Raw((*in.LTC).MarshalJSON())
	}
	if !first {
		out.RawByte(',')
	}
	first = false
	out.RawString("\"one_time_cards\":")
	if in.OTCS == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
		out.RawString("null")
	} else {
		out.RawByte('[')
		for v23, v24 := range in.OTCS {
			if v23 > 0 {
				out.RawByte(',')
			}
			if v24 == nil {
				out.RawString("null")
			} else {
				out.Raw((*v24).MarshalJSON())
			}
		}
		out.RawByte(']')
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v CreateRecipientRequest) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonD2b7633eEncodeGopkgInVirgilV5Securechat4(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v CreateRecipientRequest) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonD2b7633eEncodeGopkgInVirgilV5Securechat4(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *CreateRecipientRequest) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonD2b7633eDecodeGopkgInVirgilV5Securechat4(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *CreateRecipientRequest) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonD2b7633eDecodeGopkgInVirgilV5Securechat4(l, v)
}
