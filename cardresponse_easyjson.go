// Code generated by easyjson for marshaling/unmarshaling. DO NOT EDIT.

package virgil

import (
	json "encoding/json"
	easyjson "github.com/mailru/easyjson"
	jlexer "github.com/mailru/easyjson/jlexer"
	jwriter "github.com/mailru/easyjson/jwriter"
)

// suppress unused package warning
var (
	_ *json.RawMessage
	_ *jlexer.Lexer
	_ *jwriter.Writer
	_ easyjson.Marshaler
)

func easyjsonF968cd83DecodeGopkgInVirgilV5(in *jlexer.Lexer, out *ResponseMeta) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "created_at":
			out.CreatedAt = string(in.String())
		case "card_version":
			out.CardVersion = string(in.String())
		case "signs":
			if in.IsNull() {
				in.Skip()
			} else {
				in.Delim('{')
				if !in.IsDelim('}') {
					out.Signatures = make(map[string][]uint8)
				} else {
					out.Signatures = nil
				}
				for !in.IsDelim('}') {
					key := string(in.String())
					in.WantColon()
					var v1 []uint8
					if in.IsNull() {
						in.Skip()
						v1 = nil
					} else {
						v1 = in.Bytes()
					}
					(out.Signatures)[key] = v1
					in.WantComma()
				}
				in.Delim('}')
			}
		case "relations":
			if in.IsNull() {
				in.Skip()
			} else {
				in.Delim('{')
				if !in.IsDelim('}') {
					out.Relations = make(map[string][]uint8)
				} else {
					out.Relations = nil
				}
				for !in.IsDelim('}') {
					key := string(in.String())
					in.WantColon()
					var v3 []uint8
					if in.IsNull() {
						in.Skip()
						v3 = nil
					} else {
						v3 = in.Bytes()
					}
					(out.Relations)[key] = v3
					in.WantComma()
				}
				in.Delim('}')
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonF968cd83EncodeGopkgInVirgilV5(out *jwriter.Writer, in ResponseMeta) {
	out.RawByte('{')
	first := true
	_ = first
	if !first {
		out.RawByte(',')
	}
	first = false
	out.RawString("\"created_at\":")
	out.String(string(in.CreatedAt))
	if !first {
		out.RawByte(',')
	}
	first = false
	out.RawString("\"card_version\":")
	out.String(string(in.CardVersion))
	if !first {
		out.RawByte(',')
	}
	first = false
	out.RawString("\"signs\":")
	if in.Signatures == nil && (out.Flags&jwriter.NilMapAsEmpty) == 0 {
		out.RawString(`null`)
	} else {
		out.RawByte('{')
		v5First := true
		for v5Name, v5Value := range in.Signatures {
			if !v5First {
				out.RawByte(',')
			}
			v5First = false
			out.String(string(v5Name))
			out.RawByte(':')
			out.Base64Bytes(v5Value)
		}
		out.RawByte('}')
	}
	if !first {
		out.RawByte(',')
	}
	first = false
	out.RawString("\"relations\":")
	if in.Relations == nil && (out.Flags&jwriter.NilMapAsEmpty) == 0 {
		out.RawString(`null`)
	} else {
		out.RawByte('{')
		v8First := true
		for v8Name, v8Value := range in.Relations {
			if !v8First {
				out.RawByte(',')
			}
			v8First = false
			out.String(string(v8Name))
			out.RawByte(':')
			out.Base64Bytes(v8Value)
		}
		out.RawByte('}')
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v ResponseMeta) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonF968cd83EncodeGopkgInVirgilV5(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v ResponseMeta) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonF968cd83EncodeGopkgInVirgilV5(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *ResponseMeta) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonF968cd83DecodeGopkgInVirgilV5(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *ResponseMeta) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonF968cd83DecodeGopkgInVirgilV5(l, v)
}
func easyjsonF968cd83DecodeGopkgInVirgilV51(in *jlexer.Lexer, out *CardResponse) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "id":
			out.ID = string(in.String())
		case "content_snapshot":
			if in.IsNull() {
				in.Skip()
				out.Snapshot = nil
			} else {
				out.Snapshot = in.Bytes()
			}
		case "meta":
			(out.Meta).UnmarshalEasyJSON(in)
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonF968cd83EncodeGopkgInVirgilV51(out *jwriter.Writer, in CardResponse) {
	out.RawByte('{')
	first := true
	_ = first
	if !first {
		out.RawByte(',')
	}
	first = false
	out.RawString("\"id\":")
	out.String(string(in.ID))
	if !first {
		out.RawByte(',')
	}
	first = false
	out.RawString("\"content_snapshot\":")
	out.Base64Bytes(in.Snapshot)
	if !first {
		out.RawByte(',')
	}
	first = false
	out.RawString("\"meta\":")
	(in.Meta).MarshalEasyJSON(out)
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v CardResponse) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonF968cd83EncodeGopkgInVirgilV51(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v CardResponse) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonF968cd83EncodeGopkgInVirgilV51(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *CardResponse) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonF968cd83DecodeGopkgInVirgilV51(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *CardResponse) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonF968cd83DecodeGopkgInVirgilV51(l, v)
}
